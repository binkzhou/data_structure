import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.91000686.js";const h=JSON.parse('{"title":"二叉树顺序存储结构","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"tree/0002.md","filePath":"tree/0002.md"}'),p={name:"tree/0002.md"},e=l(`<h1 id="二叉树顺序存储结构" tabindex="-1">二叉树顺序存储结构 <a class="header-anchor" href="#二叉树顺序存储结构" aria-label="Permalink to &quot;二叉树顺序存储结构&quot;">​</a></h1><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>初始化MAX_TREE_SIZE个\\0,[&#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;, &#39;\\0&#39;]</p></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 构造空二叉树。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">Status </span><span style="color:#B392F0;">InitBiTree</span><span style="color:#E1E4E8;">(SqBiTree </span><span style="color:#FFAB70;">T</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用空字符填充二叉树的顺序结构</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 整个数组填&#39;\\0&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(T,</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(SqBiTree));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> OK;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 构造空二叉树。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">Status </span><span style="color:#6F42C1;">InitBiTree</span><span style="color:#24292E;">(SqBiTree </span><span style="color:#E36209;">T</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用空字符填充二叉树的顺序结构</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 整个数组填&#39;\\0&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(T,</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(SqBiTree));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> OK;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,4),o=[e];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
