import{_ as s,o as l,c as n,Q as a}from"./chunks/framework.91000686.js";const t="/data_structure/assets/image-20231121113826529.81337cbd.png",p="/data_structure/assets/image-20231120165037089.7ae675a0.png",f=JSON.parse('{"title":"表达式计算","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"stack/0006.md","filePath":"stack/0006.md"}'),e={name:"stack/0006.md"},o=a(`<h1 id="表达式计算" tabindex="-1">表达式计算 <a class="header-anchor" href="#表达式计算" aria-label="Permalink to &quot;表达式计算&quot;">​</a></h1><p>计算步骤</p><ol><li>判断是数字还是字符</li><li>数字入数字栈</li><li>字符判断优先级，栈顶符号<code>&gt;</code>当前符号出栈计算，栈顶符号<code>=</code>当前符号出栈，栈顶符号<code>&lt;</code>当前符号入栈</li></ol><p>如计算表达式<code>(1+3)*2/4#</code></p><ol start="0"><li><p>初始化时 运算符栈 [&#39;#&#39;] 操作数栈[]</p></li><li><p><code>(</code> 为符号<code>#</code>&lt;<code>(</code> 运算符入栈 [<code>#</code>,<code>(</code>] 此时 运算符栈 [<code>#</code> , <code>(</code>] 操作数栈[]</p></li><li><p><code>1</code>为数字入数字栈 [<code>1</code>] 此时 运算符栈 [<code>#</code>, <code>(</code>] 操作数栈[<code>1</code>]</p></li><li><p><code>+</code>为符号<code>(</code> &lt; <code>+</code> 运算符入栈 [<code>#</code>,<code>(</code>,<code>+</code>] 此时 运算符栈 [<code>#</code>,<code>(</code>,<code>+</code>] 操作数栈[<code>1</code>]</p></li><li><p><code>3</code>为数字入数字栈 [<code>1</code>,<code>3</code>] 此时 运算符栈 [<code>#</code>,<code>(</code>,<code>+</code>] 操作数栈[<code>1</code>,<code>3</code>]</p></li><li><p><code>)</code>为符号<code>+</code> &gt; <code>)</code> 操作符<code>+</code> 出栈,操作数<code>3</code>和<code>1</code> 出栈，1+3=4 求和入栈[<code>4</code>] 此时 运算符栈 [<code>#</code>,<code>(</code>] 操作数栈[<code>4</code>]</p></li><li><p><code>)</code>为符号<code>(</code> = <code>)</code> 操作符出栈 [<code>#</code>] 此时 运算符栈 [<code>#</code>] 操作数栈[<code>4</code>]</p></li><li><p><code>*</code>为符号<code>#</code> &lt; <code> *</code> 运算符入栈 [<code>#</code>,<code>*</code>] 此时 运算符栈 [<code>#</code>,<code>*</code>] 操作数栈[<code>4</code>]</p></li><li><p><code>2</code>为数字入数字栈 [<code>4</code>,<code>2</code>] 此时 运算符栈 [<code>#</code>,<code>*</code>] 操作数栈[<code>4</code>,<code>2</code>]</p></li><li><p><code>/</code>为符号<code>*</code>&gt;<code>/</code> 操作符<code>*</code> 出栈，操作数<code>4</code>和<code>2</code>出栈，4*2=8 入栈[<code>8</code>] 此时 运算符栈 [<code>#</code>] 操作数栈[<code>8</code>]</p></li><li><p><code>/</code>为符号<code>#</code>&lt;<code>/</code> 操作符<code>/</code> 入栈[<code>#</code>,<code>/</code>] 此时 运算符栈 [<code>#</code>,<code>/</code>] 操作数栈[<code>8</code>]</p></li><li><p><code>4</code> 为数字入数字栈 [<code>8</code>,<code>4</code>] 此时 运算符栈 [<code>#</code>,<code>/</code>] 操作数栈[<code>8</code>,<code>4</code>]</p></li><li><p><code>#</code> 为符号<code>/ </code>&gt;<code>#</code> 操作符<code>/</code> 出栈，操作数<code>8</code>和<code>4</code>出栈，8/4=2 入栈[<code>2</code>] 此时 运算符栈 [<code>#</code>] 操作数栈[<code>2</code>]</p></li><li><p>当前字符为<code>#</code>并且运算符栈栈顶为<code>#</code> 循环结束</p></li><li><p>返回数字栈顶元素<code>2</code></p></li></ol><h2 id="判断是否为符号" tabindex="-1">判断是否为符号 <a class="header-anchor" href="#判断是否为符号" aria-label="Permalink to &quot;判断是否为符号&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 运算符表，即表达式中允许出现的符号（包括界限符&#39;#&#39;）</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> OP</span><span style="color:#F97583;">[]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Status </span><span style="color:#B392F0;">In</span><span style="color:#E1E4E8;">(SElemType </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">OP</span><span style="color:#F97583;">[]</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    SElemType</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strchr</span><span style="color:#E1E4E8;">(OP, c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果运算符c不在合规范围内，说明指定的运算符不合规</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FALSE</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TRUE</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 运算符表，即表达式中允许出现的符号（包括界限符&#39;#&#39;）</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> OP</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Status </span><span style="color:#6F42C1;">In</span><span style="color:#24292E;">(SElemType </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">OP</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    SElemType</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strchr</span><span style="color:#24292E;">(OP, c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果运算符c不在合规范围内，说明指定的运算符不合规</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FALSE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TRUE</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="判断优先级" tabindex="-1">判断优先级 <a class="header-anchor" href="#判断优先级" aria-label="Permalink to &quot;判断优先级&quot;">​</a></h2><p>获取对应的x,y坐标来获取优先级。</p><p>x对应左侧(表示符号栈栈顶元素符号的坐标)</p><p>y对应顶部对应当前符号的坐标</p><p><img src="`+t+`" alt="image-20231121113826529"></p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-fffe7" id="tab-vIEpWrq" checked="checked"><label for="tab-vIEpWrq">Expression.c</label><input type="radio" name="group-fffe7" id="tab-H3H7U2p"><label for="tab-H3H7U2p">Expression.h</label></div><div class="blocks"><div class="language-c vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 判断运算符栈中操作符o1与表达式中的操作符o2的优先级。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回&#39;&gt;&#39;、&#39;&lt;&#39;、&#39;=&#39;，以指示o1和o2的优先级</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">OperatorType </span><span style="color:#B392F0;">Precede</span><span style="color:#E1E4E8;">(OperatorType </span><span style="color:#FFAB70;">o1</span><span style="color:#E1E4E8;">, OperatorType </span><span style="color:#FFAB70;">o2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取指定的运算符在运算符表中的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> p1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strchr</span><span style="color:#E1E4E8;">(OP, o1);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> p2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strchr</span><span style="color:#E1E4E8;">(OP, o2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算出一个运算符优先级表坐标</span></span>
<span class="line"><span style="color:#E1E4E8;">    x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p1 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> OP;</span></span>
<span class="line"><span style="color:#E1E4E8;">    y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> OP;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">PrecedeTable</span><span style="color:#E1E4E8;">[x][y];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 判断运算符栈中操作符o1与表达式中的操作符o2的优先级。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回&#39;&gt;&#39;、&#39;&lt;&#39;、&#39;=&#39;，以指示o1和o2的优先级</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">OperatorType </span><span style="color:#6F42C1;">Precede</span><span style="color:#24292E;">(OperatorType </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, OperatorType </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定的运算符在运算符表中的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strchr</span><span style="color:#24292E;">(OP, o1);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strchr</span><span style="color:#24292E;">(OP, o2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算出一个运算符优先级表坐标</span></span>
<span class="line"><span style="color:#24292E;">    x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> OP;</span></span>
<span class="line"><span style="color:#24292E;">    y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> OP;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">PrecedeTable</span><span style="color:#24292E;">[x][y];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 运算符表，即表达式中允许出现的符号（包括界限符&#39;#&#39;）</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> OP</span><span style="color:#F97583;">[]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 运算符优先级表（包括界限符&#39;#&#39;），与上面的OP表是呼应的。</span></span>
<span class="line"><span style="color:#6A737D;"> * 可参见教材中的&quot;算符间的优先关系&quot;表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">PrecedeTable</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{</span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        {</span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">}};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 运算符表，即表达式中允许出现的符号（包括界限符&#39;#&#39;）</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> OP</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 运算符优先级表（包括界限符&#39;#&#39;），与上面的OP表是呼应的。</span></span>
<span class="line"><span style="color:#6A737D;"> * 可参见教材中的&quot;算符间的优先关系&quot;表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">PrecedeTable</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{</span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">                                        {</span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">}};</span></span></code></pre></div></div></div><p><img src="`+p+`" alt="image-20231120165037089"></p><h2 id="对操作数进行运算" tabindex="-1">对操作数进行运算 <a class="header-anchor" href="#对操作数进行运算" aria-label="Permalink to &quot;对操作数进行运算&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 对操作数进行运算</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * a、b是操作数，theta是运算符。</span></span>
<span class="line"><span style="color:#6A737D;"> * 对于操作数和运算结果，仅保证对个位数的支持</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">OperandType </span><span style="color:#B392F0;">Operate</span><span style="color:#E1E4E8;">(OperandType </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, OperatorType </span><span style="color:#FFAB70;">theta</span><span style="color:#E1E4E8;">, OperandType </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, y, z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CHAR_MAX </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先从字符型转为整型</span></span>
<span class="line"><span style="color:#E1E4E8;">    x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(theta) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            z </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算完成后，将整型转换为字符型返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> z </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 对操作数进行运算</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * a、b是操作数，theta是运算符。</span></span>
<span class="line"><span style="color:#6A737D;"> * 对于操作数和运算结果，仅保证对个位数的支持</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">OperandType </span><span style="color:#6F42C1;">Operate</span><span style="color:#24292E;">(OperandType </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, OperatorType </span><span style="color:#E36209;">theta</span><span style="color:#24292E;">, OperandType </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, y, z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CHAR_MAX </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先从字符型转为整型</span></span>
<span class="line"><span style="color:#24292E;">    x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(theta) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算完成后，将整型转换为字符型返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="计算表达式" tabindex="-1">计算表达式 <a class="header-anchor" href="#计算表达式" aria-label="Permalink to &quot;计算表达式&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 从exp读入表达式，并计算表达式的运算结果</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> *   该计算功能有限，理论上仅支持对个位数运算，且要求每一步的运算结果也是个位数。</span></span>
<span class="line"><span style="color:#6A737D;"> *   教材提供此算法的目的是验证栈的使用，如果想扩展对运算符的支持，并扩大对操作数的支持，</span></span>
<span class="line"><span style="color:#6A737D;"> *   则可以顺着此思路进行改版</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">OperandType </span><span style="color:#B392F0;">EvaluateExpression</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exp</span><span style="color:#F97583;">[]</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    SElemType c;</span><span style="color:#6A737D;">   // 输入序列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    SqStack OPTR;</span><span style="color:#6A737D;">   // 运算符栈</span></span>
<span class="line"><span style="color:#E1E4E8;">    SqStack OPND;</span><span style="color:#6A737D;">   // 操作数栈</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    OperatorType theta, x;</span><span style="color:#6A737D;">  // 运算符</span></span>
<span class="line"><span style="color:#E1E4E8;">    OperandType a, b;</span><span style="color:#6A737D;">       // 操作数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// (1+3)*2/4#</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化运算符栈，并将一个界限符&#39;#&#39;入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">InitStack</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OPTR);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OPTR, </span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化操作数栈，并开始读取输入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">InitStack</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OPND);</span></span>
<span class="line"><span style="color:#E1E4E8;">    c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exp</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当输入中遇到界限符&#39;#&#39;，且运算符栈的栈顶元素也是界限符&#39;#&#39;时，则表示读取结束，且运算结束</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetTop</span><span style="color:#E1E4E8;">(OPTR) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果ch不是运算符，则视其为操作数，将其入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">In</span><span style="color:#E1E4E8;">(c, OP)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">Push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OPND, c);</span><span style="color:#6A737D;">    // 将操作数入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">            c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exp</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;">      // 获取下一个输入字符</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Precede</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GetTop</span><span style="color:#E1E4E8;">(OPTR), c)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 栈中运算符优先级低，继续进栈</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPTR</span><span style="color:#E1E4E8;">, c);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exp</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 优先级相等时，说明这里遇到括号，需要脱括号</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Pop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPTR</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exp</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">                    /*</span></span>
<span class="line"><span style="color:#6A737D;">                     * 栈中运算符优先级高时，先计算，再将计算结果压入栈</span></span>
<span class="line"><span style="color:#6A737D;">                     *</span></span>
<span class="line"><span style="color:#6A737D;">                     * 注：这儿没有读字符，c保留的还是刚才读到的字符</span></span>
<span class="line"><span style="color:#6A737D;">                     */</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt;&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Pop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPTR</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">theta</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // 弹出运算符</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Pop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPND</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">     // 弹出右边的操作数</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Pop</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPND</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">     // 弹出左边的操作数</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">Push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">OPND</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Operate</span><span style="color:#E1E4E8;">(a, theta, b));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetTop</span><span style="color:#E1E4E8;">(OPND);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 从exp读入表达式，并计算表达式的运算结果</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> *   该计算功能有限，理论上仅支持对个位数运算，且要求每一步的运算结果也是个位数。</span></span>
<span class="line"><span style="color:#6A737D;"> *   教材提供此算法的目的是验证栈的使用，如果想扩展对运算符的支持，并扩大对操作数的支持，</span></span>
<span class="line"><span style="color:#6A737D;"> *   则可以顺着此思路进行改版</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">OperandType </span><span style="color:#6F42C1;">EvaluateExpression</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exp</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    SElemType c;</span><span style="color:#6A737D;">   // 输入序列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    SqStack OPTR;</span><span style="color:#6A737D;">   // 运算符栈</span></span>
<span class="line"><span style="color:#24292E;">    SqStack OPND;</span><span style="color:#6A737D;">   // 操作数栈</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    OperatorType theta, x;</span><span style="color:#6A737D;">  // 运算符</span></span>
<span class="line"><span style="color:#24292E;">    OperandType a, b;</span><span style="color:#6A737D;">       // 操作数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// (1+3)*2/4#</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化运算符栈，并将一个界限符&#39;#&#39;入栈</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">InitStack</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OPTR);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OPTR, </span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化操作数栈，并开始读取输入</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">InitStack</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OPND);</span></span>
<span class="line"><span style="color:#24292E;">    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exp</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当输入中遇到界限符&#39;#&#39;，且运算符栈的栈顶元素也是界限符&#39;#&#39;时，则表示读取结束，且运算结束</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetTop</span><span style="color:#24292E;">(OPTR) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果ch不是运算符，则视其为操作数，将其入栈</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">In</span><span style="color:#24292E;">(c, OP)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">Push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OPND, c);</span><span style="color:#6A737D;">    // 将操作数入栈</span></span>
<span class="line"><span style="color:#24292E;">            c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exp</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">      // 获取下一个输入字符</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Precede</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GetTop</span><span style="color:#24292E;">(OPTR), c)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 栈中运算符优先级低，继续进栈</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPTR</span><span style="color:#24292E;">, c);</span></span>
<span class="line"><span style="color:#24292E;">                    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exp</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 优先级相等时，说明这里遇到括号，需要脱括号</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Pop</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPTR</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">x</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exp</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">                    /*</span></span>
<span class="line"><span style="color:#6A737D;">                     * 栈中运算符优先级高时，先计算，再将计算结果压入栈</span></span>
<span class="line"><span style="color:#6A737D;">                     *</span></span>
<span class="line"><span style="color:#6A737D;">                     * 注：这儿没有读字符，c保留的还是刚才读到的字符</span></span>
<span class="line"><span style="color:#6A737D;">                     */</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt;&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Pop</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPTR</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">theta</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 弹出运算符</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Pop</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPND</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">     // 弹出右边的操作数</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Pop</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPND</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">     // 弹出左边的操作数</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">Push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">OPND</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Operate</span><span style="color:#24292E;">(a, theta, b));</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetTop</span><span style="color:#24292E;">(OPND);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="ascll-表" tabindex="-1">ASCLL 表 <a class="header-anchor" href="#ascll-表" aria-label="Permalink to &quot;ASCLL 表&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">ASCII值</th><th style="text-align:left;">控制字符</th><th style="text-align:left;">ASCII值</th><th style="text-align:left;">控制字符</th><th style="text-align:left;">ASCII值</th><th style="text-align:left;">控制字符</th><th style="text-align:left;">ASCII值</th><th style="text-align:left;">控制字符</th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">NUT</td><td style="text-align:left;">32</td><td style="text-align:left;">(space)</td><td style="text-align:left;">64</td><td style="text-align:left;">@</td><td style="text-align:left;">96</td><td style="text-align:left;">、</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">SOH</td><td style="text-align:left;">33</td><td style="text-align:left;">!</td><td style="text-align:left;">65</td><td style="text-align:left;">A</td><td style="text-align:left;">97</td><td style="text-align:left;">a</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">STX</td><td style="text-align:left;">34</td><td style="text-align:left;">&quot;</td><td style="text-align:left;">66</td><td style="text-align:left;">B</td><td style="text-align:left;">98</td><td style="text-align:left;">b</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">ETX</td><td style="text-align:left;">35</td><td style="text-align:left;">#</td><td style="text-align:left;">67</td><td style="text-align:left;">C</td><td style="text-align:left;">99</td><td style="text-align:left;">c</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">EOT</td><td style="text-align:left;">36</td><td style="text-align:left;">$</td><td style="text-align:left;">68</td><td style="text-align:left;">D</td><td style="text-align:left;">100</td><td style="text-align:left;">d</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">ENQ</td><td style="text-align:left;">37</td><td style="text-align:left;">%</td><td style="text-align:left;">69</td><td style="text-align:left;">E</td><td style="text-align:left;">101</td><td style="text-align:left;">e</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">ACK</td><td style="text-align:left;">38</td><td style="text-align:left;">&amp;</td><td style="text-align:left;">70</td><td style="text-align:left;">F</td><td style="text-align:left;">102</td><td style="text-align:left;">f</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">BEL</td><td style="text-align:left;">39</td><td style="text-align:left;">,</td><td style="text-align:left;">71</td><td style="text-align:left;">G</td><td style="text-align:left;">103</td><td style="text-align:left;">g</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">BS</td><td style="text-align:left;">40</td><td style="text-align:left;">(</td><td style="text-align:left;">72</td><td style="text-align:left;">H</td><td style="text-align:left;">104</td><td style="text-align:left;">h</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">HT</td><td style="text-align:left;">41</td><td style="text-align:left;">)</td><td style="text-align:left;">73</td><td style="text-align:left;">I</td><td style="text-align:left;">105</td><td style="text-align:left;">i</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">LF</td><td style="text-align:left;">42</td><td style="text-align:left;">*</td><td style="text-align:left;">74</td><td style="text-align:left;">J</td><td style="text-align:left;">106</td><td style="text-align:left;">j</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">VT</td><td style="text-align:left;">43</td><td style="text-align:left;">+</td><td style="text-align:left;">75</td><td style="text-align:left;">K</td><td style="text-align:left;">107</td><td style="text-align:left;">k</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">FF</td><td style="text-align:left;">44</td><td style="text-align:left;">,</td><td style="text-align:left;">76</td><td style="text-align:left;">L</td><td style="text-align:left;">108</td><td style="text-align:left;">l</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;">CR</td><td style="text-align:left;">45</td><td style="text-align:left;">-</td><td style="text-align:left;">77</td><td style="text-align:left;">M</td><td style="text-align:left;">109</td><td style="text-align:left;">m</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;">SO</td><td style="text-align:left;">46</td><td style="text-align:left;">.</td><td style="text-align:left;">78</td><td style="text-align:left;">N</td><td style="text-align:left;">110</td><td style="text-align:left;">n</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;">SI</td><td style="text-align:left;">47</td><td style="text-align:left;">/</td><td style="text-align:left;">79</td><td style="text-align:left;">O</td><td style="text-align:left;">111</td><td style="text-align:left;">o</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;">DLE</td><td style="text-align:left;">48</td><td style="text-align:left;">0</td><td style="text-align:left;">80</td><td style="text-align:left;">P</td><td style="text-align:left;">112</td><td style="text-align:left;">p</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;">DCI</td><td style="text-align:left;">49</td><td style="text-align:left;">1</td><td style="text-align:left;">81</td><td style="text-align:left;">Q</td><td style="text-align:left;">113</td><td style="text-align:left;">q</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;">DC2</td><td style="text-align:left;">50</td><td style="text-align:left;">2</td><td style="text-align:left;">82</td><td style="text-align:left;">R</td><td style="text-align:left;">114</td><td style="text-align:left;">r</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;">DC3</td><td style="text-align:left;">51</td><td style="text-align:left;">3</td><td style="text-align:left;">83</td><td style="text-align:left;">S</td><td style="text-align:left;">115</td><td style="text-align:left;">s</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;">DC4</td><td style="text-align:left;">52</td><td style="text-align:left;">4</td><td style="text-align:left;">84</td><td style="text-align:left;">T</td><td style="text-align:left;">116</td><td style="text-align:left;">t</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;">NAK</td><td style="text-align:left;">53</td><td style="text-align:left;">5</td><td style="text-align:left;">85</td><td style="text-align:left;">U</td><td style="text-align:left;">117</td><td style="text-align:left;">u</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;">SYN</td><td style="text-align:left;">54</td><td style="text-align:left;">6</td><td style="text-align:left;">86</td><td style="text-align:left;">V</td><td style="text-align:left;">118</td><td style="text-align:left;">v</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;">TB</td><td style="text-align:left;">55</td><td style="text-align:left;">7</td><td style="text-align:left;">87</td><td style="text-align:left;">W</td><td style="text-align:left;">119</td><td style="text-align:left;">w</td></tr><tr><td style="text-align:left;">24</td><td style="text-align:left;">CAN</td><td style="text-align:left;">56</td><td style="text-align:left;">8</td><td style="text-align:left;">88</td><td style="text-align:left;">X</td><td style="text-align:left;">120</td><td style="text-align:left;">x</td></tr><tr><td style="text-align:left;">25</td><td style="text-align:left;">EM</td><td style="text-align:left;">57</td><td style="text-align:left;">9</td><td style="text-align:left;">89</td><td style="text-align:left;">Y</td><td style="text-align:left;">121</td><td style="text-align:left;">y</td></tr><tr><td style="text-align:left;">26</td><td style="text-align:left;">SUB</td><td style="text-align:left;">58</td><td style="text-align:left;">:</td><td style="text-align:left;">90</td><td style="text-align:left;">Z</td><td style="text-align:left;">122</td><td style="text-align:left;">z</td></tr><tr><td style="text-align:left;">27</td><td style="text-align:left;">ESC</td><td style="text-align:left;">59</td><td style="text-align:left;">;</td><td style="text-align:left;">91</td><td style="text-align:left;">[</td><td style="text-align:left;">123</td><td style="text-align:left;">{</td></tr><tr><td style="text-align:left;">28</td><td style="text-align:left;">FS</td><td style="text-align:left;">60</td><td style="text-align:left;">&lt;</td><td style="text-align:left;">92</td><td style="text-align:left;">\\</td><td style="text-align:left;">124</td><td style="text-align:left;">|</td></tr><tr><td style="text-align:left;">29</td><td style="text-align:left;">GS</td><td style="text-align:left;">61</td><td style="text-align:left;">=</td><td style="text-align:left;">93</td><td style="text-align:left;">]</td><td style="text-align:left;">125</td><td style="text-align:left;">}</td></tr><tr><td style="text-align:left;">30</td><td style="text-align:left;">RS</td><td style="text-align:left;">62</td><td style="text-align:left;">&gt;</td><td style="text-align:left;">94</td><td style="text-align:left;">^</td><td style="text-align:left;">126</td><td style="text-align:left;">\`</td></tr><tr><td style="text-align:left;">31</td><td style="text-align:left;">US</td><td style="text-align:left;">63</td><td style="text-align:left;">?</td><td style="text-align:left;">95</td><td style="text-align:left;">_</td><td style="text-align:left;">127</td><td style="text-align:left;">DEL</td></tr></tbody></table>`,20),c=[o];function y(r,E,d,i,F,g){return l(),n("div",null,c)}const A=s(e,[["render",y]]);export{f as __pageData,A as default};
